name: Build OpenWrt for GL-MT6000

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: "38 1 * * *"

env:
  REMOTE_REPOSITORY: pesa1234/openwrt
  CONFIG_FILE: mt6000.config
  GH_TOKEN: ${{ github.token }}

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-24.04
    outputs:
      remote_branch: ${{ steps.check_commits.outputs.remote_branch }}
      release_prefix: ${{ steps.check_commits.outputs.release_prefix }}
      new_commits: ${{ steps.check_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits in pesa1234 repo
        id: check_commits
        run: |
          remote_branch=$(git ls-remote https://github.com/${{ env.REMOTE_REPOSITORY }}.git "refs/heads/next-*" | sed -e 's|\(.*heads/\)||' | grep -vi 'test' | sort -V | tail -n1)
          [ -n "$remote_branch" ] && latest_commit_sha=$(gh api "repos/${{ env.REMOTE_REPOSITORY }}/commits/${remote_branch}" --jq .sha)
          [ -z "$latest_commit_sha" ] && { echo "*** COULD NOT GET latest_commit_sha FROM remote_branch=$remote_branch ***" ; exit 1; }
          gh api "repos/${{ github.repository }}/releases/latest" --jq .body 2>/dev/null | grep -q "${latest_commit_sha}" && echo "new_commits=false" >> $GITHUB_OUTPUT || echo "new_commits=true" >> $GITHUB_OUTPUT
          echo "remote_branch=${remote_branch}"
          echo "release_prefix=${remote_branch%.rss*}"
          echo "latest_commit_sha=$latest_commit_sha"
          echo "remote_branch=${remote_branch}" >> $GITHUB_OUTPUT
          echo "release_prefix=${remote_branch%.rss*}" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    needs: check_commits
    if: github.event_name == 'workflow_dispatch' || needs.check_commits.outputs.new_commits == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt remove -y '*cloud*' '*firefox*' '*chrome*' '*dotnet*' '*php*'
          sudo apt update -y
          # sudo apt upgrade -y
          sudo apt install -y build-essential flex bison g++ gawk gettext libncurses-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget clang llvm llvm-dev lld ccache
          sudo apt autoremove -y && sudo apt clean -y

      - name: Some debug info
        run: |
          clang --version || echo "clang not found"
          which clang || echo "clang not found in PATH"
          llvm-config --version || echo "llvm-config not found"
          llc --version || echo "llc not found"
          ccache -s || echo "ccache not found"

      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ needs.check_commits.outputs.remote_branch }}
          fetch-depth: 1

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "builder_repo"
          fetch-depth: 1

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Configure ccache
        run: |
          ccache --set-config=cache_dir=${{ github.workspace }}/.ccache
          ccache --set-config=max_size=4G
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache -p  # Show current configuration
          ccache -z  # Zero statistics
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache

      - name: Show restored ccache size
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache"
          du -sh "${{ github.workspace }}/.ccache" || true
          ccache -s || true
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache

      - name: Restore OpenWrt downloads
        uses: actions/cache/restore@v4
        with:
          path: ./dl
          key: ${{ runner.os }}-dl-${{ hashFiles('**/feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-dl-

      - name: Update and install feeds
        run: |
          set -Eeo pipefail
          echo "### Updating feeds (with retry)"
          ./scripts/feeds update -a || { echo "Update failed. Retrying in 5s..."; sleep 5; ./scripts/feeds update -a; }

          echo "### Installing feeds"
          ./scripts/feeds install -a

          # Run again because sometimes it misses some dependencies
          echo "### Re-installing feeds to catch missed deps"
          ./scripts/feeds install -a 
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Copy configuration and overlay files
        run: |
          mv -v builder_repo/files ./
          sed -i 's|XXXXXX/XXXXXX|${{ github.repository }}|' ./files/usr/bin/upgrade_custom_openwrt || exit 1
          chmod 755 ./files/usr/bin/upgrade_custom_openwrt
          mv -v builder_repo/${{ env.CONFIG_FILE }} .config
          make defconfig
          echo "### === Checking BPF config ==="
          grep -E "BPF_TOOLCHAIN|llvm-bpf" .config
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Download sources
        id: download_sources
        run: |
          echo "### Download sources with normal parallelism"
          make download -j2 || {
            echo "Retrying..."
            sleep 30
            make download -j1 V=s
          }
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Save OpenWrt downloads
        if: always() || steps.download_sources.outcome != 'skipped'
        uses: actions/cache/save@v4
        with:
          path: ./dl
          key: ${{ runner.os }}-dl-${{ hashFiles('**/feeds.conf.default') }}
      
      - name: Check Download size
        if: always()
        run: |
          echo "### ./dl directory size:"
          du -sh ./dl || true

      - name: Build host tools
        run: |
          set -eo pipefail
          ts() { while IFS= read -r line; do echo "$(date '+[%H:%M]') $line"; done; }
          echo "### Build host tools" | ts
          make tools/install -j$(nproc) 2>&1 | ts
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Build Go host (golang)
        run: |
          echo "### Build golang separately with minimal parallelism"
          make package/feeds/packages/golang/host/compile -j1 V=s || {
            echo "Fallback: trying package/golang/host/compile"
            make package/golang/host/compile -j1 V=s
          }
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Build all target packages and firmware
        run: |
          echo "### Build all target packages with normal parallelism"
          make -j$(nproc) || {
            echo "Retrying..."
            sleep 30
            make -j1 V=s
          }
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Package firmware artifacts
        run: |
          mkdir -p firmware
          find ./bin -type f \( -iname 'openwrt-*-sysupgrade.bin' -or -iname 'sha256sums' -or -iname 'config.buildinfo' \) -exec mv -v {} ./firmware/ \; ||:
          mv .config firmware/full.config ||:
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          USE_CCACHE: 1

      - name: Show final ccache statistics
        if: always()
        run: |
          file staging_dir/host/bin/gcc || echo "staging_dir/host/bin/gcc not found"
          ccache -p
          ccache -s
        env:
          CCACHE_DIR: ${{ github.workspace }}/.ccache

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gl-mt6000-firmware
          path: firmware/*
          if-no-files-found: ignore

      - name: Create release
        run: |
          RELEASE_DATE=$(date +%F)
          gh release delete "${{ needs.check_commits.outputs.release_prefix }}-${RELEASE_DATE}" --cleanup-tag -y --repo "${{ github.repository }}" ||:
          gh release create "${{ needs.check_commits.outputs.release_prefix }}-${RELEASE_DATE}" --repo "${{ github.repository }}" --latest --notes "### 🔄 Main Repository
          - **Repository:** [${{ env.REMOTE_REPOSITORY }}](https://github.com/${{ env.REMOTE_REPOSITORY }})
          - **Branch:** ${{ needs.check_commits.outputs.remote_branch }}
          - **Commit:** ${{ needs.check_commits.outputs.latest_commit_sha }}
          
          ### 📝 Build Information
          - **Target:** [Flint 2 (GL-MT6000)](https://openwrt.org/toh/gl.inet/gl-mt6000)
          - **Configuration:** [${{ env.CONFIG_FILE }}](${{ env.CONFIG_FILE }})
          - **WiFi UCODE scripts**
          - **Wireguard VPN**
          - **Policy Based Routing**
          - **Ad Block Fast**
          - **REMOVED:** odhcp, upnp, iptables, avahi, samba, usb storage..." --title "OpenWrt Custom Release for Flint 2 (${{ needs.check_commits.outputs.release_prefix }}-${RELEASE_DATE})" firmware/*

      - name: Clean up old releases
        run: |
          gh api repos/${{ github.repository }}/releases --paginate --jq '.[6:] | .[] | "\(.id) \(.tag_name)"' | while read id tag; do
            gh api -X DELETE "repos/${{ github.repository }}/releases/$id" && gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$tag" 2>/dev/null ||:
          done
